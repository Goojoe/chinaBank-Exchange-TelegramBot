# .github/workflows/docker-publish-ghcr.yml

name: Docker Image CI (GHCR - CET_BOT)

on:
  push:
    branches: [master]
    paths-ignore:
      - "**.md"
      - "docs/**"
  workflow_dispatch:

jobs:
  check_commit:
    name: Check Build Settings
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      apply_tags: ${{ steps.check.outputs.apply_tags }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get commit message
        id: get_commit_message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "Commit message: $COMMIT_MSG"

      - name: Set build settings
        id: check
        run: |
          COMMIT_MSG="${{ steps.get_commit_message.outputs.commit_message }}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "apply_tags=true" >> $GITHUB_OUTPUT
            echo "Workflow dispatched manually. Building with tags..."
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            # Only apply tags if commit message contains 'build'
            if [[ "$COMMIT_MSG" == *"build"* ]]; then
              echo "apply_tags=true" >> $GITHUB_OUTPUT
              echo "Push to master branch with 'build' in commit message. Building with tags..."
            else
              echo "apply_tags=false" >> $GITHUB_OUTPUT
              echo "Push to master branch without 'build' in commit message. Building without tags..."
            fi
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "apply_tags=false" >> $GITHUB_OUTPUT
            echo "Not a master branch push or manual dispatch. Skipping build."
          fi

  read_version:
    name: Read Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read version from file
        id: get_version
        run: |
          VERSION=$(grep -oP 'version=\K[0-9]+\.[0-9]+\.[0-9]+' version.txt)
          echo "Version read from file: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build_and_push:
    name: Build and Push CET_BOT Image to GHCR
    runs-on: ubuntu-latest
    needs: [check_commit, read_version]
    if: ${{ needs.check_commit.outputs.should_build == 'true' }}
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- 新增步骤：转换所有者名称为小写 ---
      - name: Convert owner name to lowercase
        id: owner_lc
        run: echo "OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      # ------------------------------------

      # Test image deletion section removed as per requirement

      # Removed GitHub repository tagging

      - name: Create Version Tag
        if: ${{ needs.check_commit.outputs.apply_tags == 'true' }}
        run: |
          VERSION=${{ needs.read_version.outputs.version }}
          echo "Creating tag v$VERSION"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v$VERSION" -m "Release version $VERSION"
          git push origin "v$VERSION"

      - name: Build and push Docker image to GHCR with tags
        id: build-and-push-with-tags
        if: ${{ needs.check_commit.outputs.apply_tags == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: | # --- 使用转换后的小写所有者名称和版本号 ---
            ghcr.io/${{ env.OWNER_LC }}/cet_bot:latest
            ghcr.io/${{ env.OWNER_LC }}/cet_bot:sha-${{ github.sha }}
            ghcr.io/${{ env.OWNER_LC }}/cet_bot:v${{ needs.read_version.outputs.version }}
          labels: |
            org.opencontainers.image.title=CET_BOT
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.build-and-push-with-tags.outputs.metadata.image.created }}

      # Test build section removed as per requirement

      - name: Build and push Docker image to GHCR without version tags
        id: build-and-push-without-tags
        if: ${{ needs.check_commit.outputs.apply_tags == 'false' && needs.check_commit.outputs.should_build == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: | # --- 使用唯一标识符和主分支标签 ---
            ghcr.io/${{ env.OWNER_LC }}/cet_bot:commit-${{ github.sha }}
            ghcr.io/${{ env.OWNER_LC }}/cet_bot:master
          # platforms: linux/amd64,linux/arm64
          labels: |
            org.opencontainers.image.title=CET_BOT
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.build-and-push-without-tags.outputs.metadata.image.created }}
      # (可选) 输出构建的镜像 Digest 和元数据
      # - name: Print image digest
      #   run: echo ${{ steps.build-and-push.outputs.digest }}
      # - name: Print image metadata
      #   run: echo '${{ steps.build-and-push.outputs.metadata }}'

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [read_version, build_and_push, check_commit]
    if: ${{ needs.check_commit.outputs.apply_tags == 'true' }}
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.read_version.outputs.version }}
          release_name: v${{ needs.read_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            Release version ${{ needs.read_version.outputs.version }}

            Docker image available at:
            - ghcr.io/${{ github.repository_owner }}/cet_bot:v${{ needs.read_version.outputs.version }}
            - ghcr.io/${{ github.repository_owner }}/cet_bot:latest
